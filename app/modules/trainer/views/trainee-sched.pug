include ../../../templates/tr-head
include ./custom-stylesheets/checkbox

block main   

  .container
    section.wrapper.site-min-height(style='margin-top:15px;')
      .col-lg-12
        .row.content-panel
          .col-md-4.profile-text.mt.mb.centered
            h3 #{general.memclassname} - #{general.membershipname}
            h6 Membership
            h3 #{general.session_count}
            h6 Sessions Left
          .col-md-4.profile-text.mt.mb
            h3 #{general.userfname} #{general.userlname}
            h6
              #branch #{general.memclassname} - #{general.membershipname}
              br
              #genderAge #{general.usergender} - #{general.userbday} yrs old 
              br
              #email #{general.useremail}
              br  
              #mobile #{general.usermobile} 
              input.hidden(type='text' value=`${general.userid}` id ='aydi')
              input.hidden#sessionid(type=text value = general.sessionID)
              input.hidden#userid(type=text value = general.userid)
              input.hidden#sessionForSchedCount(type=text value = general.sessionForSched)
              input.hidden#sessioncount(type=text value = general.session_count)

              input.hidden#trainerid(type="text" value=`${hello.trainerid}`)
              input.hidden#trainerschedule(type="text" value=`${hello.trainerschedule}`)
              input.hidden#trainertimestart(type="text" value=`${hello.trainertimestart}`)
              input.hidden#trainertimeend(type="text" value=`${hello.trainertimeend}`)

              input.hidden#eventsHidden(type='text' value='')

          .col-md-4.centered
            .profile-pic
              p
                img.img-circle.img-thumbnail(width=150 src='../../../assets/img/chip.png')
              p
                button#giveup.btn.btn-theme(value= general.userid)
                  | Give Up Client
      .col-lg-12.mt
        .row.content-panel
          .panel-heading
            ul.nav.nav-tabs.nav-justified
              li.active
                a(data-toggle='tab', href='#manage') Manage Trainees Schedule
              li
                a(data-toggle='tab', href='#history') History of Sessions
          .panel-body
            .tab-content
              #manage.tab-pane.active
                .row
                  .col-lg-3.mt.text-center
                    .panel-body
                      h5 Sessions left to Schedule: 
                      h1#sessionForSched #{general.sessionForSched}
                    .panel-body

                      button#changeAvailabilty.btn.btn-theme(style="margin: 15px auto") Change Availability
                      button#cancel.btn.btn-default(style="display:none; margin: 15px auto") Cancel

                      p 
                        small
                          i Hint: Change days where you are available or not. This is important since your trainee is bound to your given schedule of availability. Not changing when you are not available is solely your fault.                       

                  .col-lg-9.mt
                    .panel-body
                      #kalendaryo
                    .panel-body#changeAvailabiltyBody(style="display:none")
                      .input-group
                        span.input-group-addon
                          | Work Days:
                        label.checkbox
                          | Monday
                          input#mon.schedCheck(type='checkbox', name='sched[]' ,value=1)
                          span.check
                        label.checkbox
                          | Tuesday
                          input#tue.schedCheck(type='checkbox', name='sched[]', value=2)
                          span.check
                        label.checkbox
                          | Wednesday
                          input#wed.schedCheck(type='checkbox', name='sched[]', value=3)
                          span.check
                        span.input-group-addon
                        label.checkbox
                          | Thursday
                          input#thur.schedCheck(type='checkbox', name='sched[]',value=4)
                          span.check
                        label.checkbox
                          | Friday
                          input#fri.schedCheck(type='checkbox', name='sched[]',value=5)
                          span.check
                        label.checkbox
                          | Saturday
                          input#sat.schedCheck(type='checkbox', name='sched[]',value=6)
                          span.check
                        span.input-group-addon
                        label.checkbox
                          | Sunday
                          input#sun.schedCheck(type='checkbox', name='sched[]', value=0)
                          span.check
                      center
                        br
                        p
                          small 
                            i Note: Days that are disabled have scheduled events. 
                        br
                        button#changeAvailabilitySubmit.btn.btn-theme Save
              #history.tab-pane
                .row
                  .col-lg-12.mt
                    table.table
                      thead
                        tr
                          th Date & Time
                          th Status
                          th
                      tbody
                        each s in sessions
                          tr
                            td #{s.sessionDate} ( #{s.sessionTime} )
                            if s.description != null
                              td 
                                .label.label-danger Unsuccesful
                            else 
                              td 
                                .label.label-success Succesful

include ../../../templates/foot

//- CHANGE AVAILABILITY
include ./custom-js/ChangeAvalabilityViewToggle

//- SAVE CHANGE AVAILABILITY
script.
  $(document).ready(function(){
    $('#changeAvailabilitySubmit').click(function(){
      const checkboxes = $('.schedCheck');
      const finalSched = [];
      const id = $('#trainerid').val();
      for( let i=0; i<checkboxes.length; i++ ){
        checkboxes[i].checked && finalSched.push(checkboxes.eq(i).val())
      }
      const newsched = finalSched.toString()
      $.post('/trainer/trainer/newsched', { 
        newsched,
        id
      }).done( 
        swal({
          type: 'success',
          title: 'You Succesfully Changed your Availability.',
          showConfirmButton: false,
          timer: 1500
        })
        .then(() => {
          location.reload();
        })
      )
    })
  })

//- INITIALIZE CALENDAR 
script.

  $(document).ready(function () {

    const today = moment().format('YYYY-MM-DD')
    const yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD')

    $.post(`/trainer/trainee/viewSched?id=${$('#userid').val()}`).done(function (data) {  

      const evs = []
      const trainerschedule = `[${$('#trainerschedule').val()}]`
      const trainerscheduleArray = JSON.parse(trainerschedule)
      const trainertimestart = $('#trainertimestart').val()
      const trainertimeend = $('#trainertimeend').val()
      const colorDisabled = "rgba(255, 187, 0, 0.2)"
      let schedStatus;
      let delId

      for (let i = 0; i < data.length; i++) {
        const scheduleForPopover = `${moment(data[i].sessionDate).format('MMM DD, YYYY')} 
          (${data[i].sessionTime} - ${moment(data[i].sessionTime, 'hh:mm a').add(1, 'h').format('hh:mm a')})`
        let name = `${data[i].userfname} ${data[i].userlname}`
        let sessionDate = moment(data[i].sessionDate).format('YYYY-MM-DD')
        let timeStart = moment(data[i].sessionTime, 'hh:mm a').format('HH:mm')
        let timeEnd = moment(data[i].sessionTime, 'hh:mm a').add(1, 'h').format('HH:mm')
        let sessionDay = moment(data[i].sessionDate, 'YYYY-MM-DD').format('dddd')
        let start = `${sessionDate} ${timeStart}`
        let end = `${sessionDate} ${timeEnd}`
        let content = data[i].description
        schedStatus = data[i].scheduleStatus
        delId = data[i].PTid

        if (sessionDay === 'Monday'){
          $('.schedCheck[value=1]').prop('disabled',true)
          $('.schedCheck[value=1]').siblings($('.checkbox input:checked~.check'))
            .css("background-color", colorDisabled)
        }
        if (sessionDay === 'Tuesday'){
          $('.schedCheck[value=2]').prop('disabled',true)
          $('.schedCheck[value=2]').siblings($('.checkbox input:checked~.check'))
            .css("background-color", colorDisabled)
        }
        if (sessionDay === 'Wednesday'){
          $('.schedCheck[value=3]').prop('disabled',true)
          $('.schedCheck[value=3]').siblings($('.checkbox input:checked~.check'))
            .css("background-color", colorDisabled)
        }
        if (sessionDay === 'Thursday'){
          $('.schedCheck[value=4]').prop('disabled',true)
          $('.schedCheck[value=4]').siblings($('.checkbox input:checked~.check'))
            .css("background-color", colorDisabled)
        }
        if (sessionDay === 'Friday'){
          $('.schedCheck[value=5]').prop('disabled',true)
          $('.schedCheck[value=5]').siblings($('.checkbox input:checked~.check'))
            .css("background-color", colorDisabled)
        }
        if (sessionDay === 'Saturday'){
          $('.schedCheck[value=6]').prop('disabled',true)
          $('.schedCheck[value=6]').siblings($('.checkbox input:checked~.check'))
            .css("background-color", colorDisabled)
        }
        if (sessionDay === 'Sunday'){
          $('.schedCheck[value=0]').prop('disabled',true)
          $('.schedCheck[value=0]').siblings($('.checkbox input:checked~.check'))
            .css("background-color", colorDisabled)
        }

        if (sessionDate > yesterday){

          const desc = {
          id: delId,
          title: name,
          start: start,
          end: end,
          color: '#77dd77',
          overlap: false,
          content: content,
          eventSessionId: data[i].sessionID,
          scheduleStatus: data[i].scheduleStatus,
          schedule: `${moment(data[i].sessionDate).format('MMM DD, YYYY')} (${data[i].sessionTime} - ${moment(data[i].sessionTime, 'hh:mm a').add(1, 'h').format('hh:mm a')})`,
          constraint: 'businessHours'
          }
          
          evs.push(desc)
        }
        else{
          if ( $('#sessioncount').val() != 0 ){
            $.post('/trainer/schedule/update', {
            ptid: data[i].PTid,
            status: schedStatus,
            id: $('#sessionid').val()
            }).done(
              location.reload()
            )
          }
        }
      }
      console.log(evs)

      $('#kalendaryo').fullCalendar({
        header: {
          left: 'prev,next',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        defaultView: 'month',
        validRange: {
          start: today
        },
        businessHours: [{
          dow: trainerscheduleArray, 
          start: trainertimestart,
          end: trainertimeend 
        }],
        allDaySlot: false,
        weekMode: 'liquid',
        editable: true,
        eventOverlap: false,
        eventStartEditable: true,
        eventDurationEditable: false,
        minTime: '08:00',
        maxTime: '24:00',
        eventClick: function (event, jsEvent, view) {
          swal({
            title: 'Cancel Schedule?',
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm'
          })
          .then((result) => {
            if (result.value) {
              $.post('/trainer/trainee/schedule/delete', {
                delId: event.id,
                eventSessionId: event.eventSessionId
              }).done(
                swal({
                  type: 'success',
                  title: 'You Succesfully Cancelled a Session',
                  showConfirmButton: false,
                  timer: 1500
                })
                .then(() => {
                  location.reload();
                })
              )
            }
          })
        },
        eventDrop: function (event, delta, revertFunc) {
          var newDate = moment(event.start).format('YYYY-MM-DD')
          var newTimeStart = moment(event.start).format('hh:mm a')
          var newTimeEnd = moment(event.end).format('hh:mm a')

          swal({
            type: 'warning',
            title: 'Reschedule?',
            html: `Are you sure you want to move the Schedule to <br>
              ${moment(newDate).format('MMM D')}, ${moment(newTimeStart, 'hh:mm a').format('h:mm')} - 
              ${moment(newTimeEnd, 'hh:mm a').format('h:mm A')}?`,
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm'
          }).then((result) =>{
            if(result.value){
              $.post('/trainer/trainee/reschedule',{
                reschedDate : newDate,
                reschedTime : newTimeStart,
                reschedId : event.id
              }).done(
                swal({
                  type: 'success',
                  title: 'Rescheduling was succesful!',
                  showConfirmButton: false,
                  timer: 1500
                })
              )
            }
            else{
              revertFunc();
            }
          })
        },
        selectable: true,
        selectHelper: true,
        allowOutsideClick: false,
        events: evs,
        eventLimit: true,
        eventRender: function(event, element) {
          if (event.scheduleStatus == 2) {
            element.css({
              'background-color': '#ff6961',
              'border-color': '#ff6961'
            })
              element.popover({
              title: `${event.title} - Rejects`,
              trigger: 'hover',
              placement: 'top',
              content: event.content,
              container: 'body'
            })
          }
          element.popover({
            title: event.title,
            trigger: 'hover',
            placement: 'top',
            content: event.schedule,
            container: 'body'
          })
        },
        select: function (startDate, jsEvent, view) {
          console.log("stratday:", startDate._d)
          var schedCount = $('#sessionForSchedCount').val()
          var idForSched = $('#userid').val()
          var view = $('#kalendaryo').fullCalendar('getView')

          if (view.name !== 'month') {
            if (schedCount > 0) {
              
              const sessionDate = moment(startDate).format('YYYY-MM-DD')
              const scheduleToDisplay = moment(startDate).format('MMM D YYYY')
              const timeStart = moment(startDate).format('hh:mm a')
              const timeEnd = moment(timeStart, 'hh:mm a').add(1, 'h').format('hh:mm a')

              swal({
                title: 'Schedule a Personal Training Session on',
                html: `<b>${scheduleToDisplay}</b></br><b>${timeStart} - ${timeEnd}</b>`,
                type: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Confirm'
                })
                .then((result) => {
                  if (result.value) {
                    $ .post('/trainer/trainee/schedule', {
                      othermember: $('#aydi').val(),
                      idForSched: idForSched
                      })
                      .done(function (data) {
                        const memid = data[0].userid
                        const sessionid = data[0].sessionID
                        const sessionTime = timeStart
                        $ .post('/trainer/trainee/schedule/add', {
                            memid,
                            sessionid,
                            sessionDate,
                            sessionTime
                          })
                          .done(  
                            swal({
                              type: 'success',
                              title: 'You Succesfully Scheduled a Session',
                              showConfirmButton: false,
                              timer: 1500
                            })
                            .then(() => {
                              location.reload();
                            })
                          )
                      })
                  }
                })
            } else {
              swal({
                type: 'error',
                title: 'Oops...',
                text: `This user haven't bought sessions to schedule yet.`,
              })
            }
          } else if (view.name === 'month') {
            if (schedCount > 0) {
              $('#kalendaryo').fullCalendar('changeView', 'agendaDay')
              $('#kalendaryo').fullCalendar('gotoDate', startDate)
            } else {
              swal({
                type: 'error',
                title: 'Oops...',
                text: `This user haven't bought sessions to schedule yet.`,
              })
            }
          } else {
            return
          }
        }
      })
    })
  })

  //- Change Trainer
  $('#giveup').click(function(){
    swal({
      type: 'question',
      title: 'Feedback Needed',
      text: 'Please write the reason why you wanted give up your current trainee.',
      input: 'textarea',
      inputPlaceholder: 'Type your message here...',
      confirmButtonText: 'Submit',
      showCancelButton: true
    }).then((result)=>{
      if (result.value) {
        $.post('/trainer/change',{
          reason: result.value,
          userid: $(this).val()
        }).done(
          swal(
          'Submitted',
          'Your request has been submitted. Please wait for the official decision.',
          'info'
          ).then(()=>{
            location.href = '/trainer/change'
          })
        )
      }
    })
  })