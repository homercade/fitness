include ../../../templates/tr-head
block main   

  .container
    section.wrapper.site-min-height(style='margin-top:15px;')
      .col-lg-12
        .row.content-panel
          .col-md-4.profile-text.mt.mb.centered
            h3 #{general.memclassname} - #{general.membershipname}
            h6 Membership
            h3 #{general.session_count}
            h6 Sessions Left
          .col-md-4.profile-text.mt.mb
            h3 #{general.userfname} #{general.userlname}
            h6
              #branch #{general.memclassname} - #{general.membershipname}
              br
              #genderAge #{general.usergender} - #{general.userbday} yrs old 
              br
              #email #{general.useremail}
              br  
              #mobile #{general.usermobile} 
              input.hidden(type='text' value=`${general.userid}` id ='aydi')
              input.hidden#sessionid(type=text value = general.sessionID)
              input.hidden#userid(type=text value = general.userid)
              input.hidden#sessionForSchedCount(type=text value = general.sessionForSched)
              input.hidden#sessioncount(type=text value = general.session_count)
            
          .col-md-4.centered
            .profile-pic
              p
                img.img-circle.img-thumbnail(width=150 src='../../../assets/img/chip.png')
              p
                button#giveup.btn.btn-theme(value= general.userid)
                  | Give Up Client
      .col-lg-12.mt
        .row.content-panel
          .panel-heading
            ul.nav.nav-tabs.nav-justified
              li.active
                a(data-toggle='tab', href='#manage') Manage Trainees Schedule
              li
                a(data-toggle='tab', href='#history') History of Sessions
          .panel-body
            .tab-content
              #manage.tab-pane.active
                .row
                  .col-lg-3.mt.text-center
                    .panel-body
                      h5 Sessions left to Schedule: 
                      h1#sessionForSched #{general.sessionForSched}
                    
                  .col-lg-9.mt
                      .panel-body
                        #kalendaryo
              #history.tab-pane
                .row
                  .col-lg-12.mt
                    table.table
                      thead
                        tr
                          th Date & Time
                          th Status
                          th
                      tbody
                        tr
                          td 01/01/18 (8:00-9:00PM)
                          td Success
                          td
                            a(style='color:rgb(18, 35, 49); cursor:pointer;', data-toggle='modal', data-target='#remove')
                              i.fa.fa-times

include ../../../templates/foot

//- INITIALIZE CALENDAR
script.

  $(document).ready(function () {
    
    var now = moment().format('YYYY-MM-DD')
    var yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD')

    $.post(`/trainer/trainee/viewSched?id=${$('#userid').val()}`).done(function (data) {  
     
      var evs = []
      var delId
      var schedStatus
      var date = new Date();

      for (i = 0; i < data.length; i++) {
        let name = `${data[i].userfname} ${data[i].userlname}`
        let sessionDate = moment(data[i].sessionDate).format('YYYY-MM-DD')
        let timeStart = moment(data[i].sessionTime, 'hh:mm a').format('HH:mm')
        let timeEnd = moment(data[i].sessionTime, 'hh:mm a').add(1, 'h').format('HH:mm')
        let start = `${sessionDate} ${timeStart}`
        let end = `${sessionDate} ${timeEnd}`
        let content = data[i].description
        schedStatus = data[i].scheduleStatus
        delId = data[i].PTid
             
        if (sessionDate > yesterday){

          var desc = {
          id: delId,
          title: name,
          start: start,
          end: end,
          color: '#77dd77',
          overlap: false,
          content: content,
          eventSessionId: data[i].sessionID,
          scheduleStatus: data[i].scheduleStatus,
          schedule: `${moment(data[i].sessionDate).format('MMM DD, YYYY')} (${data[i].sessionTime} - ${moment(data[i].sessionTime, 'hh:mm a').add(1, 'h').format('hh:mm a')})`
          }

          evs.push(desc)

        }
        else{
          if ( $('#sessioncount').val() != 0 ){
            $.post('/trainer/schedule/update', {
            ptid : data[i].PTid,
            status : schedStatus,
            id: $('#sessionid').val()
            })
          }
        }
      }
    
      $('#kalendaryo').fullCalendar({
        header: {
          left: 'prev,next',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        defaultView: 'month',
        validRange: {
          start: now
        },
        allDaySlot: false,
        weekMode: 'liquid',
        editable: true,
        eventOverlap: false,
        eventStartEditable: true,
        eventDurationEditable: false,
        minTime: '08:00',
        maxTime: '21:00',
        eventClick: function (event, jsEvent, view) {
          swal({
            title: 'Cancel Schedule?',
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm'
          })
          .then((result) => {
            if (result.value) {
              $.post('/trainer/trainee/schedule/delete', {
                delId: event.id,
                eventSessionId: event.eventSessionId
              }).done(
                swal({
                  type: 'success',
                  title: 'You Succesfully Cancelled a Session',
                  showConfirmButton: false,
                  timer: 1500
                })
                .then(() => {
                  location.reload();
                })
              )
            }
          })
        },
        eventDrop: function (event, delta, revertFunc) {

          //- var newDate
          var newDate = moment(event.start).format('YYYY-MM-DD')
          var newTimeStart = moment(event.start).format('hh:mm a')
          var newTimeEnd = moment(event.end).format('hh:mm a')

          swal({
            type: 'warning',
            title: 'Reschedule?',
            html: `Are you sure you want to move the Schedule to <br>${moment(newDate).format('MMM D')}, ${moment(newTimeStart, 'hh:mm a').format('h:mm')} - ${moment(newTimeEnd, 'hh:mm a').format('h:mm A')}?`,
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm'
          }).then((result) =>{
            if(result.value){
              
              $.post('/trainer/trainee/reschedule',{
                reschedDate : newDate,
                reschedTime : newTimeStart,
                reschedId : event.id
              }).done(
                swal({
                  type: 'success',
                  title: 'Rescheduling was succesful!',
                  showConfirmButton: false,
                  timer: 1500
                }).then(() => {
                  location.reload();
                })
              )
            }
            else{
              revertFunc();
            }
          })
        },
        selectable: true,
        selectHelper: true,
        allowOutsideClick: false,
        events: evs,
        eventLimit: true,
        eventRender: function(event, element) {
          if (event.scheduleStatus == 2) {
            element.css({
              'background-color': '#ff6961',
              'border-color': '#ff6961'
            })
              element.popover({
              title: `${event.title} - Rejects`,
              trigger: 'hover',
              placement: 'top',
              content: event.content,
              container: 'body'
            })
          }
          element.popover({
            title: event.title,
            trigger: 'hover',
            placement: 'top',
            content: event.schedule,
            container: 'body'
          })
        },
        //- viewRender: function(jsEvent){
        //-   $('#p').val()
        //- }
        select: function (startDate, jsEvent, view) {

          var schedCount = $('#sessionForSchedCount').val()
          var idForSched = $('#userid').val()
          var view = $('#kalendaryo').fullCalendar('getView')

          if (view.name != 'month') {
            if (schedCount > 0) {
              var scheduleDate = moment(startDate).format('YYYY-MM-DD')
              var scheduleDate2 = moment(scheduleDate, 'YYYY-MM-DD').format('MMM D YYYY')
              timeStart = moment(startDate).format('hh:mm a')
              timeEnd = moment(timeStart, 'hh:mm a').add(1, 'h').format('hh:mm a')
             
              swal({
                  title: 'Schedule a Personal Training Session on',
                  html: `<b>${scheduleDate2}</b></br><b>${timeStart} - ${timeEnd}</b>`,
                  type: 'info',
                  showCancelButton: true,
                  confirmButtonColor: '#3085d6',
                  cancelButtonColor: '#d33',
                  confirmButtonText: 'Confirm'
                })
                .then((result) => {
                  if (result.value) {

                    $.post('/trainer/trainee/schedule', {
                        othermember: $('#aydi').val(),
                        idForSched: idForSched
                      })

                      .done(function (data) {
                        var memid = data[0].userid
                        var sessionid = data[0].sessionID
                        var sessionDate = scheduleDate
                        var sessionTime = timeStart

                        $.post('/trainer/trainee/schedule/add', {
                            memid: memid,
                            sessionid: sessionid,
                            sessionDate: sessionDate,
                            sessionTime: sessionTime,
                          })

                          .done(
                            swal({
                              type: 'success',
                              title: 'You Succesfully Scheduled a Session',
                              showConfirmButton: false,
                              timer: 1500
                            })
                            .then(() => {
                              location.reload();
                            })
                          )
                      })
                  }
                })
            } else {
              swal({
                type: 'error',
                title: 'Oops...',
                text: `This user haven't bought sessions to schedule yet.`,
              })
            }
          } else if (view.name == 'month') {
            if (schedCount > 0) {
              $('#kalendaryo').fullCalendar('changeView', 'agendaDay')
              $('#kalendaryo').fullCalendar('gotoDate', startDate)
            } else {
              swal({
                type: 'error',
                title: 'Oops...',
                text: `This user haven't bought sessions to schedule yet.`,
              })
            }
          } else {
            return
          }
        }
      })
    })


        //- Change Trainer
    $('#giveup').click(function(){
    const text = ''
      swal({
        type: 'question',
        title: 'Feedback Needed',
        text: 'Please write the reason why you wanted give up your current trainee.',
        input: 'textarea',
        inputPlaceholder: 'Type your message here...',
        confirmButtonText: 'Submit',
        showCancelButton: true
      }).then((result)=>{
        if (result.value) {
          $.post('/trainer/change',{
            reason: result.value,
            userid: $(this).val()
          }).done(
            swal(
            'Submitted',
            'Your request has been submitted. Please wait for the official decision.',
            'info'
            ).then(()=>{
              location.href = '/trainer/change'
            })
          )
        }
      })
    })
    
  })