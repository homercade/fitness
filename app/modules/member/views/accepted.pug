include ../../../templates/mem-head
block main   

  .container
    //- INITIALIZE TRAINER DETAILS
    input.hidden#trainerschedule(type="text" value=`${pt[0].trainerschedule}`)
    input.hidden#trainertimestart(type="text" value=`${pt[0].trainertimestart}`)
    input.hidden#trainertimeend(type="text" value=`${pt[0].trainertimeend}`)
    //- ACTUAL CONTENT
    section.wrapper.site-min-height(style='margin-top:15px;')
      .col-lg-12
        .row.content-panel
          .col-md-5.profile-text.mt.mb.centered
            h3 #{pt[0].memclassname} - #{pt[0].membershipname}
            h6 Membership
            h3 #{pt[0].session_count}
            h6 Sessions Bought
            button#buySession.btn.btn-theme(value = pt[0].userid)
              i.fa.fa-shopping-cart
              |
              | Buy Session
            input#sessionID.hidden(type="text" value = pt[0].sessionID)
            input#sessionStatus.hidden(type="text" value = pt[0].sessionStatus)


          .col-md-4.profile-text(style='margin-top:20px!important;')
            h4(style='margin-left:0') You are currently assigned to <br><b>#{pt[0].trainerfname} #{pt[0].trainerlname}</b>
            h5 Trainer Details: 
            h6 
              .li #{pt[0].branchname}
              .li #{pt[0].trainergender} - #{pt[0].trainerbday} yrs old
              .li #{pt[0].traineremail}
              .li #{pt[0].trainermobile}

          .col-md-3.centered
            .profile-pic
              p
                img.img-circle.img-thumbnail(width=150 src='/assets/img/ui-sherman.jpg')
              p
                button#changeTrainer.btn.btn-theme(type='button', value = pt[0].trainerid)
                  | Change Trainer
      .col-lg-12.mt
        .row.content-panel#content
          .panel-heading
            ul.nav.nav-tabs.nav-justified
              li.active
                a(data-toggle='tab', href='#manage') Manage Schedule
              li
                a(data-toggle='tab', href='#history') History of Sessions
          .panel-body
            .tab-content
              #manage.tab-pane.active
                .row                    
                  .col-lg-9.mt(style='float:none; margin: 0 auto')
                    .panel-body
                      #kalendaryo
              #history.tab-pane
                .row
                  .col-lg-12.mt
                    table.table
                      thead
                        tr
                          th Date & Time
                          th Status
                          th
                      tbody
                        each s in sessions
                          tr

                            td #{s.sessionDate} ( #{s.sessionTime} )
                            if s.description != null
                              td 
                                .label.label-danger Unsuccesful
                            else 
                              td 
                                .label.label-success Succesful

.dateModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
  .modal-dialog.modal-sm
    .modal-content
      .modal-header
        button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
        h4#myModalLabel.modal-title Date Picker
      form
        .modal-body
          .container-fluid
            .row
              .col-md-12
                .form-group
                  h4 Preferred date for a training session?
                  input.form-control.d(type="text" placeholder='Pick a date...')
      .modal-footer
        button.confirm.btn.btn-primary(type='button' value) Confirm

.timeModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
  .modal-dialog.modal-sm
    .modal-content
      .modal-header
        button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
        h4#myModalLabel.modal-title Time Picker
      form
        .modal-body
          .container-fluid
            .row
              .col-md-12
                .form-group
                  h4 Preferred time for a training session?
                  input.form-control.t(type="text" placeholder='Pick a time...')
      .modal-footer
        button.confirm.btn.btn-primary(type='button' value) Confirm

script.

include ../../../templates/foot

script.
  $(document).ready(function(){
    $(".d").datepicker({
      todayHighlight: true,
      autoclose: true,
      startDate: "today",
      maxViewMode: 0
    })

    $('.t').timepicker({
      minuteStep: 30,
      showInputs: false,
      disableFocus: true
    });
  })

script.
  $(document).ready(function () {
    var fee
    $.post('/member/fee').done(function(data){
      console.log(data)
      fee = data.fee

    })
    $('#buySession').click(function () {
      let stat = $('#sessionStatus').val()
      if (stat == '') {

        swal({
          title: 'How many Sessions?',
          text: `Current price per Session is ₱ ${fee}.00`,
          input: 'number',
          showCancelButton: true,
          confirmButtonText: 'Confirm',
          showLoaderOnConfirm: true,
          allowOutsideClick: () => !swal.isLoading()
        })
        .then((result) => {
          let sessionID = $('#sessionID').val()
          if (result.value) {
            let total = result.value * fee
            let amount = result.value

              swal({
                title: 'Are you sure?',
                text: `This act is irreversible here. You must settle or cancel your balance of ₱ ${total}.00 on your chosen branch of us in-person`,
                type: 'warning',
                showCancelButton: true,
                cancelButtonColor: '#d33',
                confirmButtonText: 'Confirm'
              }).then((result) => {
                if (result.value) {

                  $.post('/member/buy', {
                    amount: amount,
                    sessionID: sessionID
                  })

                  .done(
                    swal({
                      type: 'success',
                      title: 'Success!',
                      text: `You succesfully bought ${amount} session(s). Don't forget to settle your balance or this transaction will be void.` 
                      })
                  )
                }
              })
          }
        })

      } else {
        swal({
          type: 'error',
          title: 'Sorry...',
          text: 'You have already requested to buy a session. Please settle your last transaction before requesting buy more.',
        })
      }
    })
  })



script.
  $(document).ready(function(){

    $.post('/member/pt/schedule').done(function (data) {
      var evs = []
      var delId
      var prefDate 
      var prefTime 
      var description
      var schedStatus
      let trainerschedule = `[${$('#trainerschedule').val()}]`;
      let trainerscheduleArray = JSON.parse(trainerschedule);
      let trainertimestart = $('#trainertimestart').val();
      let trainertimeend = $('#trainertimeend').val();
      console.log(trainerschedule, trainertimestart, trainertimeend)

      for (i = 0; i < data.length; i++) {
        let name = `${data[i].trainerfname} ${data[i].trainerlname}`
        let sessionDate = moment(data[i].sessionDate).format('YYYY-MM-DD')
        let timeStart = moment(data[i].sessionTime, 'hh:mm a').format('HH:mm')
        let timeEnd = moment(data[i].sessionTime, 'hh:mm a').add(1, 'h').format('HH:mm')
        let start = `${sessionDate} ${timeStart}`
        let end = `${sessionDate} ${timeEnd}`
        let content = data[i].description
        schedStatus = data[i].scheduleStatus
        delId = data[i].PTid

        console.log(name)
        console.log(start)
        console.log(end)

        var desc = {
          id: delId,
          title: name,
          start: start,
          end: end,
          eventSessionId: data[i].sessionID,
          scheduleStatus: data[i].scheduleStatus,
          color: '#77dd77',
          overlap: false,
          date: `${moment(data[i].sessionDate).format('MMM DD, YYYY')}`,
          content: content,
          schedule: `${data[i].sessionTime} - ${moment(data[i].sessionTime, 'hh:mm a').add(1, 'h').format('hh:mm a')}`,
          constraint: 'businessHours'
          
        }
        evs.push(desc)
      }

      var now = moment().format('YYYY-MM-DD')

      var calendar = $('#kalendaryo').fullCalendar({
        header: {
          left: 'prev,next today',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        defaultView: 'month',
        validRange: {
          start: now
        },
        allDaySlot: false,
        weekMode: 'liquid',
        editable: true,
        eventOverlap: false,
        eventDurationEditable: false,
        minTime: '08:00',
        maxTime: '22:00',
        businessHours: [{
          dow: trainerscheduleArray, 
          start: trainertimestart,
          end: trainertimeend 
        }],
        eventClick: function (event, jsEvent, view) {
          if (event.scheduleStatus == 1){
            swal({
            title: 'Reject Schedule?',
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm'
          }).then((result) => {
            if (result.value) {
              swal({
                type: 'question',
                title: "What don't you like about your schedule?",
                showCancelButton: true,
                confirmButtonText: 'Date',
                confirmButtonColor: '#d33',
                cancelButtonText: 'Time',
                cancelButtonColor: '#d33'
              }).then((result) => {
                if (result.value) {
                  $('.dateModal').modal('show')
                  $('.confirm').click(function () {
                    prefDate = moment(`${$('.d').val()}`).format('MMM DD')
                    if (prefDate != 'Invalid date'){
                      $('.dateModal').modal('hide')
                      description = `Shedule Rejected. Prefers ${prefDate}.`

                      $.post('/member/schedule/reject', {
                        desc: description,
                        rejId: event.id

                      }).done(
                        swal({
                          type: 'info',
                          title: 'You rejected a Session.',
                          showConfirmButton: false,
                          timer: 1500
                        })
                        .then(() => {
                          location.reload();
                        })
                      )
                    }
                    else{
                      alert('Please pick your preferred date.')
                    }

                  })
                } else if (result.dismiss === swal.DismissReason.cancel) {
                  $('.timeModal').modal('show')
                  $('.confirm').click(function () {
                    $('.timeModal').modal('hide')
                    prefTime = $('.t').val()
                    description = `Shedule Rejected. Prefers ${prefTime}.`

                      $.post('/member/schedule/reject', {
                        desc: description,
                        rejId: event.id

                      }).done(
                        swal({
                          type: 'info',
                          title: 'You rejected a Session',
                          showConfirmButton: false,
                          timer: 1500
                        })
                        .then(() => {
                          location.reload();
                        })
                      )
                  })
                }
              })
            }
          })
        }
        else {
          swal({
            title: 'Undo rejection?',
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm'
          }).then((results)=>{
            if (results.value){
              $.post('/member/schedule/reject/undo',{
                rejId: event.id
              }).done(
                swal({
                  type: 'success',
                  title: 'Undo Succesful',
                  showConfirmButton: false,
                  timer: 1500
                })
                .then(() => {
                  location.reload();
                })
              )
            }
          })
        }
        },
        eventDrop: function (event, delta, revertFunc) {

          //- var newDate
          var newDate = moment(event.start).format('YYYY-MM-DD')
          var newTimeStart = moment(event.start).format('hh:mm a')
          var newTimeEnd = moment(event.end).format('hh:mm a')

          swal({
            type: 'warning',
            title: 'Reschedule?',
            html: `Are you sure you want to move the Schedule to <br>${moment(newDate).format('MMM D')}, ${moment(newTimeStart, 'hh:mm a').format('h:mm')} - ${moment(newTimeEnd, 'hh:mm a').format('h:mm A')}?`,
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm'
          }).then((result) =>{
            if(result.value){
              
              $.post('/member/trainee/reschedule',{
                reschedDate : newDate,
                reschedTime : newTimeStart,
                reschedId : event.id
              }).done(
                swal({
                  type: 'success',
                  title: 'Rescheduling was succesful!',
                  showConfirmButton: false,
                  timer: 1500
                }).then(() => {
                  location.reload();
                })
              )
            }
            else{
              revertFunc();
            }
          })
        },
        selectable: true,
        selectHelper: true,
        allowOutsideClick: false,
        events: evs,
        eventRender: function(event, element) {
          if (event.scheduleStatus == 2) {
          element.css({
            'background-color': '#ff6961',
            'border-color': '#ff6961'
          })
            element.popover({
            title: `You Rejected`,
            trigger: 'hover',
            placement: 'top',
            content: event.content,
            container: 'body'
          })
          }
          element.popover({
            title: event.date,
            trigger: 'hover',
            placement: 'top',
            content: event.schedule,
            container: 'body'
          })
        },
        selectable: true,
        selectHelper: true,
        allowOutsideClick: false,
        events: evs,
        eventRender: function(event, element) {
          if (event.scheduleStatus == 2) {
          element.css({
            'background-color': '#ff6961',
            'border-color': '#ff6961'
          })
            element.popover({
            title: `You Rejected`,
            trigger: 'hover',
            placement: 'top',
            content: event.content,
            container: 'body'
          })
          }
          element.popover({
            title: event.date,
            trigger: 'hover',
            placement: 'top',
            content: event.schedule,
            container: 'body'
          })
        },
        select: function (startDate, jsEvent, view) {

          var schedCount = $('#sessionForSchedCount').val()
          var idForSched = $('#idForSched').val()
          var view = $('#kalendaryo').fullCalendar('getView')

          if (view.name == 'month') {

            $('#kalendaryo').fullCalendar('changeView', 'agendaDay')
            $('#kalendaryo').fullCalendar('gotoDate', startDate)

          } else {
            return
          }
        }
      })
    })


    //- Change Trainer
    $('#changeTrainer').click(function(){
    const text = ''
      swal({
        type: 'question',
        title: 'Feedback Needed',
        text: 'Please write the reason why you wanted to change your current personal trainer.',
        input: 'textarea',
        inputPlaceholder: 'Type your message here...',
        confirmButtonText: 'Submit',
        showCancelButton: true
      }).then((result)=>{
        if (result.value) {
          $.post('/member/change',{
            reason: result.value,
            trainerid: $(this).val(),
          }).done(
            swal(
            'Submitted',
            'Your request has been submitted. Please wait for the official decision.',
            'info'
            ).then(()=>{
              location.href = '/member/change'
            })
          )
        }
      })
    })
  })





