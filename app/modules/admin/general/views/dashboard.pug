include ../../../../templates/head
append head
  style.
    h3 span{
      margin-right:10px;
    }

    #toast-container > div {
      opacity: 1;
    }

block main
  #navbar.hidden
  section#main-content
    section.wrapper.site-min-height
      .row
        .col-lg-9.main-chart
          .row.mtbox
            .col-md-2.col-sm-2.box0.col-md-offset3
              .box1
                span.li_heart
                h3 210
              p 210 Active Members
            .col-md-2.col-sm-2.box0
              .box1
                span.li_calendar
                h3 25
              p 25 Active Trainers
            .col-md-2.col-sm-2.box0
              .box1
                span.li_vynil
                h3 3
              p 3 Active Classes
          .row.mt
            //- .col-lg-9.main-chart.charts
            .col-md-12.mb
              canvas#memberByMembership
          .row.mt
            .col-md-1
            .col-md-4.mb
              .darkblue-panel.pn
                .darkblue-header
                  h5 TOP USER
                p
                  img.img-circle(src='assets/img/ui-zac.jpg', width='80')
                footer
                  p
                    b Zac Snider
                  .row
                    .col-md-6
                      h5.small.mt MEMBER SINCE
                      p 2012
                    .col-md-6
                      h5.small.mt TOTAL SPEND
                      p $ 47,60
            .col-md-7
              canvas#memberByMonth


        .col-lg-3.ds
          h3 
            span.li_heart 
            |  Membership
          .desc
            .thumb
              img.img-circle(src='assets/img/gold.png', width='35px', height='35px', align='')
            .details
              h6  Gold Membership
          .desc
            .thumb
              img.img-circle(src='assets/img/gold.png', width='35px', height='35px', align='')
            .details
              h6  Silver Membership
          .desc
            .thumb
              img.img-circle(src='assets/img/gold.png', width='35px', height='35px', align='')
            .details
              h6  Bronze Membership
          h3 
            span.li_calendar 
            |  Class List
          .desc
            .thumb
              img.img-circle(src='assets/img/class.png', width='35px', height='35px', align='')
            .details
              h6  Body Building
          .desc
            .thumb
              img.img-circle(src='assets/img/class.png', width='35px', height='35px', align='')
            .details
              h6 Aerobics
          .desc
            .thumb
              img.img-circle(src='assets/img/class.png', width='35px', height='35px', align='')
            .details
              h6 General Training

          //- Input for RFID
          input#hiddenInput(type='text' style="opacity:0" )


include ../../../../templates/foot.pug

script.

  $(document).ready(function () {
    const oneHour = 3600000
    const toastrOption = {
      closeButton: true,
      positionClass: "toast-bottom-left",
      timeOut: oneHour,
      extendedTimeOut: oneHour
    }

    $.post('/view/notif').done(function (data) {
      if (data.length !== 0){
        toastr.info(`You have ${data.length} pending membership`, 'Membership Request', toastrOption )
      }
    })

    $.post('/view/notif/payment').done(function (data) {
      if (data.length !== 0){
        toastr.info(`${data.length} clients purchased sessions`, 'Training Session', toastrOption )
      }
    })

  })

script.
  $(document).ready(function () {
    setInterval(function(){
      $('#hiddenInput').trigger('focus')
    },500)


    $('#hiddenInput').on('change', function(){
    $.post('/', { 
      cardNumber: $(this).val()
    }).done(function(response){
      console.log(response);
      // const logDate = new Date().toLocaleTimeString('en-US', { hour: 'numeric', hour12: true, minute: 'numeric' }); (optional)
      if(response == 'noCard'){
        swal({
          title: 'Card does not exist!',
          text: 'This card is either unregistered, or the owner\'s membership has expired.',
          type: 'error',
          showCancelButton: false,
          showConfirmButton: false,
          timer: 6000
        });
        $('#hiddenInput').val('');
      }
      else{
        console.log(response[0].memberid);
        swal({
          title: response[0].userfname + ' ' + response[0].userlname,
          html: 'Subscription: ' + response[0].memclassname + ' â€” ' + response[0].membershipname, // + '<br><b>Time In: </b>' + logDate (optional)
          type: 'success',
          footer: '<b>Expiration Date</b>:  ' + response[0].expiryDate,
          showCancelButton: false,
          showConfirmButton: false,
          timer: 6000
        })
        $('#hiddenInput').val('');
      }
    });
    })
  })

script.
  $(document).ready(function(){
    //- LINE CHART
    //- dataset
    const months = ['January', 'Feburuary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    const monthsAbb = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']
    const numberOfMembersApplied = [3, 0, 2, 1, 7, 2, 6, 0, 0, 1, 23, 0]

    //- initialization
    const chartMemberByMonth = document.getElementById('memberByMonth').getContext('2d')
    const chartMemberByMembership = document.getElementById('memberByMembership').getContext('2d')

    setTimeout(() => {
      const chart1 = new Chart(chartMemberByMonth, {
        type: 'line',
        data: {
          labels: monthsAbb,
          datasets: [{
            label: 'Members Registered',
            data: numberOfMembersApplied,
            backgroundColor: '#2F96B4',
            borderColor: '#2F96B4',
            fill: false,
          }]
        },
        options: {
          title: {
            display: true,
            text: 'Top Registers'
          },
          scales: {
            xAxes: [{
              gridLines: {
                display: true,
                drawBorder: true,
                drawOnChartArea: false,
              }
            }],
            yAxes: [{
              gridLines: {
                display: true,
                drawBorder: true,
              },
              ticks: {
                stepSize: 5
              }
            }]
          }
        }
      })
    }, 500)

    //- PIE CHART
    let memberships = []
    let membershipsWithDescription = []
    let memberCount = []
    
    $.post('/graph/membership/members').done(function (allMemberships) {
      allMemberships.forEach(membership => {
        memberships.push(membership.memclassname)
      })
      memberships.forEach(membership => {
        $.post('/graph/membership/members/count', { membership }).done(count => {
          for (let key in count[0]) {
            membership = `${membership} members count - ${count[0][key]}`
            membershipsWithDescription.push(membership)
            memberCount.push(count[0][key])
          }
        })
      })
    })

    setTimeout(() => {
      const chart2 = new Chart(chartMemberByMembership, {
        type: 'doughnut',
        data: {
          labels: membershipsWithDescription,
          datasets: [{
            label: 'Members Registered',
            data: memberCount,
            backgroundColor: [
              '#ff6961',
              '#FCCA83',
              '#779ecb',
              '#ffb3ba',
              '#baffc9',
              '#ffffba'
              ],
            borderColor: '#f2f2f2',
            label: 'Dataset 1'
          }]
        },
        options: {
          title: {
            display: true,
            text: 'Most Applied'
          },
          legend: {
            position: 'bottom',
          },
          tooltips: {
            callbacks: {
              label: function(tooltipItem, data) {
                let dataset = data.datasets[tooltipItem.datasetIndex];
                let total = dataset.data.reduce(function(previousValue, currentValue, currentIndex, array) {
                  return previousValue + currentValue;
                });
                let currentValue = dataset.data[tooltipItem.index];
                let percentage = Math.floor(((currentValue/total) * 100)+0.5);         
                return percentage + "%";
              }
            }
          }
        }
      })
    }, 500)
  })